Use The folowing Notes:
---
Asp.NetCoreBasics.txt
dotnet.txt
ApiGateway (Ocelot).txt
WCF.txt
GRPC.txt
IdentityServer4.txt
Docker.txt
Swagger.txt
Testing.txt
Clean Architecture.txt
Design Patterns and Architecture.txt
Visual Studio.txt


/////////Structure///////////////////////////////////
Nuget packages:
.Api:
    MediatR
    MicroElements.Swashbuckle.FluentValidation
    Microsoft.AspNetCore.Authentication.JwtBearer
    Microsoft.AspNetCore.Mvc.Versioning.ApiExplorer
    Microsoft.EntityFrameworkCore.Tools
.Application:
    FluentValidation
    FluentValidation.DependencyInjectionExtensions
    MediatR
    MediatR.Extensions.Microsoft.DependencyInjection
    AutoMapper
    AutoMapper.Extensions.Microsoft.DependencyInjection
    Microsoft.Extensions.Configuration
    Microsoft.Extensions.DependencyInjection
.Domain:
    -
.Framework:
    FluentValidation
    MediatR
    Microsoft.AspNetCore.Mvc
    Microsoft.EntityFrameworkCore
.infrastructure:
    MediatR
    Microsoft.EntityFrameworkCore
    Microsoft.EntityFrameworkCore.Relational
    Microsoft.EntityFrameworkCore.SqlServer
    Microsoft.EntityFrameworkCore.Tools
-wherever you wanna inject a package's dependency, you have to install its dependencyInjection package
/////////Tips///////////////////////////////////
.Api:
    Controllers:
        -you can't use conflicting same routs for different requests of the same type, give it prefixes to fix it:
        Get:
            [HttpGet("{id}"]
            [HttpGet("number/{name}"]
            [HttpGet("groupName/{name}"]
        Post:
            
.Application:
    .
.Domain:
    AggregatesModel:
        Repository Interfaces:
            Make sure not to set return types as specific as "List<>", but use "IEnumerable<>" instead.
.Framework:
    .
.infrastructure:




/////////Creation///////////////////////////////////
.Api:
    Controllers:
        
            
.Application:
    .
.Domain:
    AggregatesModel:
        Entities:
            -inherit AggregateRoot
            -all prooperties should be private set
            -a relational list should look like this:
                private readonly List<NaturalUser> _naturalUsers;
                public IReadOnlyCollection<NaturalUser> NaturalUsers => _naturalUsers;
            -
            -empty constructor (but get realtional lists in it)
        Repository Interfaces:
            
.Framework:
    .
.infrastructure:









/////////How To do stuff///////////////////////////////////
convert enums to storable values:
-give each option a number and save the enum like this:
	public enum GroupNumberStatus
    {
        Active=1,
        Inactive=0
    }
-Use the enum like this:
	[EnumDataType(typeof(AutoRegisterStatus))]
    public AutoRegisterStatus AutoRegister
    {
        get { return (AutoRegisterStatus)this.AutoRegisterId; }
        set { this.AutoRegisterId = (int)value; }
    }
    public virtual int AutoRegisterId { get; set; }